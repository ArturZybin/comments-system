{"version":3,"sources":["img/avatar.svg","img/comments.svg","redux/authUserReducer.ts","redux/rootReducer.ts","redux/types.ts","firebase/FirebaseConstructor.js","firebase/FirebaseContext.ts","constants/routes.ts","firebase/withAuthorisation.tsx","components/NavBar.tsx","components/pages/comments/CommentsPage.tsx","components/pages/auth/SignInPage.tsx","components/pages/auth/SignUpPage.tsx","components/pages/auth/PasswordResetPage.tsx","components/pages/account/SignOutButton.tsx","components/pages/account/PasswordUpdateForm.tsx","components/pages/account/AccountPage.tsx","App.tsx","firebase/useAuthentication.tsx","redux/actions.ts","index.tsx"],"names":["module","exports","INITIAL_STATE","user","username","rootReducer","combineReducers","authUser","state","action","type","payload","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","userDB","uid","db","ref","usersDB","app","initializeApp","this","database","FirebaseContext","React","createContext","condition","COMMENTS","NavBar","useSelector","isCurrentPageComments","useLocation","pathname","ROUTES","commentsClassname","accountClassname","className","to","src","commentsSrc","alt","avatarSrc","CommentsPage","SignInPage","history","useHistory","firebase","useContext","useState","setEmail","setPassword","error","setError","emailClassName","passwordClassName","validator","validate","length","isFormInvalid","onSubmit","event","preventDefault","then","push","catch","name","value","onChange","target","placeholder","disabled","message","SignUpPage","setUsername","passwordOne","setPasswordOne","passwordTwo","setPasswordTwo","usernameClassName","passwordOneClassName","passwordTwoClassName","set","PasswordResetPage","SignOutButton","onClick","PasswordUpdateForm","AccountPage","Component","props","isConfirm","App","dispatch","useDispatch","useEffect","onAuthStateChanged","once","snapshot","val","setAuthUserUsername","useAuthentication","exact","path","component","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","render","StrictMode","loading","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.391a9a55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.511718fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments.d68b6143.svg\";","import { CHANGE_AUTH_USER, SET_AUTH_USER_USERNAME } from \"./types\";\nimport { TAuthUser, IGlobalState } from \"../constants/typescript-types\";\n\n\ninterface IAction {\n   type: string,\n   payload: TAuthUser | string\n}\n\ntype TState = IGlobalState['authUser']\n\n\nconst INITIAL_STATE = {\n   user: null,\n   username: null\n}\n\nexport const authUserReducer = (state: TState = INITIAL_STATE, action: IAction) => {\n   switch(action.type) {\n      case CHANGE_AUTH_USER:\n         return { user: action.payload, username: null } as TState\n      case SET_AUTH_USER_USERNAME:\n         return { ...state, username: action.payload } as TState\n      default:\n         return state\n   }\n}","import { combineReducers } from \"redux\";\nimport { authUserReducer } from \"./authUserReducer\";\n\nexport const rootReducer = combineReducers({\n   authUser: authUserReducer\n})","// authUser\nexport const CHANGE_AUTH_USER = 'CHANGE_AUTH_USER'\nexport const SET_AUTH_USER_USERNAME = 'SET_AUTH_USER_USERNAME'","import app from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\n\n\nconst config = {\n   apiKey: \"AIzaSyDpt6WXqe7-GrSdSZxe1w1jD_h9XQIQWYA\",\n   authDomain: \"comments-system-6e56a.firebaseapp.com\",\n   databaseURL: \"https://comments-system-6e56a.firebaseio.com\",\n   projectId: \"comments-system-6e56a\",\n   storageBucket: \"comments-system-6e56a.appspot.com\",\n   messagingSenderId: \"463788584226\",\n   appId: \"1:463788584226:web:d0787997fe53b69d8d497b\",\n   measurementId: \"G-LMGZ5VEP27\"\n};\n\n\nexport class FirebaseConstructor {\n   constructor() {\n      app.initializeApp(config)\n\n      this.auth = app.auth()\n      this.db = app.database()\n   }\n\n   // *** Auth API ***\n   doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password)\n   \n   doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password)\n   \n   doSignOut = () => this.auth.signOut()\n   \n   doPasswordReset = (email) => this.auth.sendPasswordResetEmail(email)\n\n   doPasswordUpdate = (password) => this.auth.currentUser.updatePassword(password)\n\n   // *** Database API ***\n   userDB = (uid) => this.db.ref(`users/${uid}`)\n\n   usersDB = () => this.db.ref('users')\n}","import React from 'react'\nimport { FirebaseConstructor } from './FirebaseConstructor'\n\nexport const Firebase = new FirebaseConstructor()\nexport const FirebaseContext = React.createContext<FirebaseConstructor>(Firebase)","export const GITHUB_PAGES = '/comments-system'\n\nexport const COMMENTS = '/comments'\nexport const SIGN_IN = '/signin'\nexport const SIGN_UP = '/signup'\nexport const ACCOUNT = '/account'\nexport const PASSWORD_RESET = '/password-reset'","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport { TAuthUser, IGlobalState } from '../constants/typescript-types'\nimport * as ROUTES from '../constants/routes'\n\n\ntype TCondition = (authUser: TAuthUser) => boolean\n\nexport const withAuthorisation = (condition: TCondition) => (Component: React.FC) => {\n\n   const WithAuthorisation: React.FC = (props) => {\n      const history = useHistory()\n      const authUser = useSelector((state: IGlobalState) => state.authUser.user)\n      const isConfirm = condition(authUser)\n\n      if (!isConfirm) {\n         history.push(ROUTES.SIGN_IN)\n      }\n\n      return isConfirm ? <Component {...props} /> : null\n   }\n\n   return WithAuthorisation\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link, useLocation } from 'react-router-dom'\n\nimport * as ROUTES from '../constants/routes'\nimport { TAuthUser, IGlobalState } from '../constants/typescript-types'\n\nimport avatarSrc from '../img/avatar.svg'\nimport commentsSrc from '../img/comments.svg'\n\n\nexport const NavBar: React.FC = () => {\n   const authUser: TAuthUser = useSelector((state: IGlobalState) => state.authUser.user)\n   const isCurrentPageComments = (useLocation().pathname === ROUTES.COMMENTS)\n\n   const commentsClassname = (isCurrentPageComments) ? 'navbar__button navbar__button_pressed' : 'navbar__button'\n   const accountClassname = (isCurrentPageComments) ? 'navbar__button' : 'navbar__button navbar__button_pressed'\n\n   let username = useSelector((state: IGlobalState) => state.authUser.username)\n   if (!username) username = 'Loading...'\n\n\n   return (\n      <nav className=\"navbar\">\n         <Link to={ROUTES.COMMENTS} className={commentsClassname}>\n            <img className=\"navbar__img\" src={commentsSrc} alt=\"Comments\" />\n         </Link>\n\n         {authUser ?\n            <Link to={ROUTES.ACCOUNT} className={accountClassname}>{username}</Link>\n            :\n            <Link to={ROUTES.SIGN_IN} className={accountClassname}>\n               <img className=\"navbar__img\" src={avatarSrc} alt=\"Sign In\" />\n            </Link>\n         }\n      </nav>\n   )\n}","import React from 'react'\n\nexport const CommentsPage: React.FC = () => (\n   <h2>CommentsPage</h2>\n)","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignInPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n\n   const [email, setEmail] = useState<string>('')\n   const [password, setPassword] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doSignInWithEmailAndPassword(email, password)\n         .then(() => {\n            setEmail('')\n            setPassword('')\n            setError(null)\n\n            history.push(ROUTES.COMMENTS)\n         })\n         .catch(setError)\n   }\n\n\n   let emailClassName = 'form__input'\n   let passwordClassName = 'form__input'\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n   passwordClassName += (password && password.length < 6) ? ' form__input_invalid' : ''\n\n   const isFormInvalid = password.length < 6 || !validator.validate(email)\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Sign In</h2>\n\n            <form onSubmit={handleSubmit}>\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value)}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <input\n                  name=\"password\"\n                  className={passwordClassName}\n                  value={password}\n                  onChange={(event) => setPassword(event.target.value)}\n                  type=\"password\"\n                  placeholder=\"Password\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Sign In\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign up</Link>\n            </p>\n            <p className=\"form__link\">\n               Forgot password? <Link to={ROUTES.PASSWORD_RESET}>Reset</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignUpPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n\n   const [username, setUsername] = useState<string>('')\n   const [email, setEmail] = useState<string>('')\n   const [passwordOne, setPasswordOne] = useState<string>('')\n   const [passwordTwo, setPasswordTwo] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doCreateUserWithEmailAndPassword(email, passwordOne)\n         .then((authUser) => {\n            firebase\n               .userDB(authUser.user?.uid)\n               .set({ username, email })\n         })\n         .then(() => {\n            setUsername('')\n            setEmail('')\n            setPasswordOne('')\n            setPasswordTwo('')\n            setError(null)\n\n            history.push(ROUTES.COMMENTS)\n         })\n         .catch(setError)\n   }\n\n\n   let usernameClassName = 'form__input'\n   let emailClassName = 'form__input'\n   let passwordOneClassName = 'form__input'\n   let passwordTwoClassName = 'form__input'\n   usernameClassName += (username && username.length < 3) ? ' form__input_invalid' : ''\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n   passwordOneClassName += (passwordOne && passwordOne.length < 6) ? ' form__input_invalid' : ''\n   passwordTwoClassName += (passwordTwo && passwordTwo !== passwordOne) ? ' form__input_invalid' : ''\n\n   const isFormInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne.length < 6 ||\n      !validator.validate(email) ||\n      username === ''\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Sign Up</h2>\n\n            <form onSubmit={handleSubmit}>\n               <input\n                  name=\"username\"\n                  className={usernameClassName}\n                  value={username}\n                  onChange={(event) => setUsername(event.target.value)}\n                  type=\"text\"\n                  placeholder=\"Username\"\n               />\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value)}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <input\n                  name=\"passwordOne\"\n                  className={passwordOneClassName}\n                  value={passwordOne}\n                  onChange={(event) => setPasswordOne(event.target.value)}\n                  type=\"password\"\n                  placeholder=\"Password\"\n               />\n               <input\n                  name=\"passwordTwo\"\n                  className={passwordTwoClassName}\n                  value={passwordTwo}\n                  onChange={(event) => setPasswordTwo(event.target.value)}\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Sign Up\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Already have an account? <Link to={ROUTES.SIGN_IN}>Sign in</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { Link, useHistory } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const PasswordResetPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n   \n\n   const [email, setEmail] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleReset(): void {\n      firebase\n         .doPasswordReset(email)\n         .then(() => {\n            setEmail('')\n            setError(null)\n\n            history.push(ROUTES.SIGN_IN)\n         })\n         .catch(setError)\n   }\n\n\n   let emailClassName = 'form__input'\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n\n   const isFormInvalid = !validator.validate(email)\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Reset Password</h2>\n\n            <form onSubmit={handleReset}>\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value)}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Send reset email\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Recall password? <Link to={ROUTES.SIGN_IN}>Sign in</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignOutButton: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n   const history = useHistory()\n\n   function handleClick() {\n      firebase.doSignOut()\n      history.push(ROUTES.COMMENTS)\n   }\n\n   return (\n      <button onClick={handleClick} className=\"form__input form__button\">\n         Sign Out\n      </button>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\n\n\nexport const PasswordUpdateForm: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n\n   const [passwordOne, setPasswordOne] = useState<string>('')\n   const [passwordTwo, setPasswordTwo] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doPasswordUpdate(passwordOne)\n         .then(() => {\n            setPasswordOne('')\n            setPasswordTwo('')\n            setError(null)\n         })\n         .catch(setError)\n   }\n\n   let passwordOneClassName = 'form__input'\n   let passwordTwoClassName = 'form__input'\n   passwordOneClassName += (passwordOne && passwordOne.length < 6) ? ' form__input_invalid' : ''\n   passwordTwoClassName += (passwordTwo && passwordTwo !== passwordOne) ? ' form__input_invalid' : ''\n\n   const isFormInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne.length < 6\n\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <input\n            name=\"passwordOne\"\n            className={passwordOneClassName}\n            value={passwordOne}\n            onChange={(event) => setPasswordOne(event.target.value)}\n            type=\"password\"\n            placeholder=\"New Password\"\n         />\n         <input\n            name=\"passwordTwo\"\n            className={passwordTwoClassName}\n            value={passwordTwo}\n            onChange={(event) => setPasswordTwo(event.target.value)}\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n         />\n         <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n            Update password\n               </button>\n\n         {error && <p className=\"form__error\">{error.message}</p>}\n      </form>\n   )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { SignOutButton } from './SignOutButton'\n\nimport { withAuthorisation } from '../../../firebase/withAuthorisation'\nimport { TAuthUser, IGlobalState } from '../../../constants/typescript-types'\nimport { PasswordUpdateForm } from './PasswordUpdateForm'\n\n\nconst AccountPageBase: React.FC = () => {\n   let { user: authUser, username } = useSelector((state: IGlobalState) => state.authUser)\n   if (!username) username = 'Loading ...'\n   const email = authUser?.email\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title form__username\">{username}</h2>\n            <h2 className=\"form__title form__email\">{email}</h2>\n            \n            <PasswordUpdateForm />\n            <hr/>\n            <SignOutButton />\n         </div>\n      </div>\n   )\n}\n\nconst condition = (authUser: TAuthUser) => !!authUser\n\nexport const AccountPage = withAuthorisation(condition)(AccountPageBase)","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nimport { useAuthentication } from './firebase/useAuthentication';\nimport * as ROUTES from './constants/routes'\n\nimport { NavBar } from './components/NavBar';\nimport { CommentsPage } from './components/pages/comments/CommentsPage';\nimport { SignInPage } from './components/pages/auth/SignInPage';\nimport { SignUpPage } from './components/pages/auth/SignUpPage';\nimport { PasswordResetPage } from './components/pages/auth/PasswordResetPage';\nimport { AccountPage } from './components/pages/account/AccountPage';\n\nimport 'normalize.css'\nimport './styles/style.scss'\n\n\nexport const App: React.FC = () => {\n   useAuthentication()\n   \n   return (\n      <Router>\n         <NavBar />\n\n         <Route exact path='/'> <Redirect to={ROUTES.COMMENTS} /> </Route>\n         <Route path={ROUTES.GITHUB_PAGES}> <Redirect to={ROUTES.COMMENTS} /> </Route>\n\n         <Route path={ROUTES.COMMENTS} component={CommentsPage} />\n         <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n         <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n         <Route path={ROUTES.PASSWORD_RESET} component={PasswordResetPage} />\n         <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n      </Router>\n   );\n}","import { useEffect, useContext } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { TAuthUser } from '../constants/typescript-types'\nimport { changeAuthUser, setAuthUserUsername } from '../redux/actions'\nimport { FirebaseContext } from './FirebaseContext'\n\nexport function useAuthentication() {\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n\n   useEffect(() => {\n      const unsubscribe = firebase.auth.onAuthStateChanged((authUser: TAuthUser) => {\n         dispatch(changeAuthUser(authUser))\n\n         firebase.userDB(authUser?.uid).once('value')\n            .then((snapshot) => {\n               if (!snapshot.val()) return\n               const username = snapshot.val().username\n               dispatch(setAuthUserUsername(username))\n            })\n      })\n\n      return unsubscribe\n      // eslint-disable-next-line\n   }, [])\n}","import { CHANGE_AUTH_USER, SET_AUTH_USER_USERNAME } from \"./types\";\nimport { TAuthUser } from \"../constants/typescript-types\";\n\n// authUser -----------------------------------------------------------------------\nexport const changeAuthUser = (user: TAuthUser) => ({\n   type: CHANGE_AUTH_USER,\n   payload: user\n})\n\nexport const setAuthUserUsername = (username: string) => ({\n   type: SET_AUTH_USER_USERNAME,\n   payload: username\n})","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { rootReducer } from './redux/rootReducer';\n\nimport { App } from './App';\nimport { Firebase, FirebaseContext } from './firebase/FirebaseContext';\n\n\nconst persistConfig = {\n   key: 'root',\n   storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store: any = createStore(persistedReducer)\nconst persistor = persistStore(store)\n\nrender(\n   <React.StrictMode>\n      <Provider store={store}>\n         <PersistGate loading={null} persistor={persistor}>\n            <FirebaseContext.Provider value={Firebase}>\n               <App />\n            </FirebaseContext.Provider>\n         </PersistGate>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}