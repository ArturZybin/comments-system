{"version":3,"sources":["img/avatar.svg","img/comments.svg","img/heart.svg","redux/authUserReducer.ts","redux/rootReducer.ts","redux/types.ts","redux/commentsReducer.ts","firebase/FirebaseConstructor.ts","firebase/FirebaseContext.ts","constants/routes.ts","components/NavBar.tsx","components/pages/comments/CommentForm.tsx","components/pages/comments/Comment.tsx","components/pages/comments/CommentsPage.tsx","firebase/withAuthorisation.tsx","components/pages/comments/useCommenstLoading.tsx","redux/actions.ts","components/pages/auth/SignInPage.tsx","components/pages/auth/SignUpPage.tsx","components/pages/auth/PasswordResetPage.tsx","components/pages/account/SignOutButton.tsx","components/pages/account/PasswordUpdateForm.tsx","components/pages/account/AccountPage.tsx","App.tsx","firebase/useAuthentication.tsx","index.tsx"],"names":["module","exports","INITIAL_STATE","user","username","rootReducer","combineReducers","authUser","state","action","type","payload","comments","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","auth","db","parentURL","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","userRef","uid","collection","doc","commentsRef","doCreateComment","comment","add","app","initializeApp","this","firestore","queries","window","location","search","substring","split","pair","getParentURL","FirebaseContext","React","createContext","COMMENTS","NavBar","useSelector","isCurrentPageComments","useLocation","pathname","ROUTES","commentsClassname","accountClassname","className","to","src","commentsSrc","alt","avatarSrc","CommentForm","firebase","useContext","useState","text","setText","onSubmit","event","preventDefault","authorUsername","authorUID","created","Timestamp","fromMillis","Date","now","likesCount","then","docRef","console","log","id","catch","error","value","onChange","target","maxLength","placeholder","Comment","moment","unix","seconds","fromNow","heart","width","condition","CommentsPage","dispatch","useDispatch","orderBy","limit","query","setQuery","loading","setLoading","commentsOver","setCommenstOver","loadComments","get","documentSnapshots","docs","length","lastVisible","startAfter","loadedComments","map","data","addComments","useEffect","isCommentsOver","useCommentsLoading","commentsTemplate","key","nanoseconds","onClick","disabled","SignInPage","history","useHistory","setEmail","setPassword","setError","emailClassName","passwordClassName","validator","validate","isFormInvalid","push","name","trim","message","SignUpPage","setUsername","passwordOne","setPasswordOne","passwordTwo","setPasswordTwo","usernameClassName","passwordOneClassName","passwordTwoClassName","set","PasswordResetPage","SignOutButton","PasswordUpdateForm","AccountPage","Component","props","isConfirm","App","onAuthStateChanged","exists","setAuthUserUsername","useAuthentication","exact","path","component","persistConfig","blacklist","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.33f438b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.511718fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments.d68b6143.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.77100eea.svg\";","import { CHANGE_AUTH_USER, SET_AUTH_USER_USERNAME } from \"./types\";\nimport { TAuthUser, IGlobalState } from \"../constants/typescript-types\";\n\n\ninterface IAction {\n   type: string,\n   payload: TAuthUser | string\n}\n\ntype TState = IGlobalState['authUser']\n\n\nconst INITIAL_STATE = {\n   user: null,\n   username: null\n}\n\nexport function authUserReducer (state: TState = INITIAL_STATE, action: IAction) {\n   switch(action.type) {\n      case CHANGE_AUTH_USER:\n         return { user: action.payload, username: null } as TState\n      case SET_AUTH_USER_USERNAME:\n         return { ...state, username: action.payload } as TState\n      default:\n         return state\n   }\n}","import { combineReducers } from \"redux\";\nimport { authUserReducer } from \"./authUserReducer\";\nimport { commentsReducer } from \"./commentsReducer\";\n\nexport const rootReducer = combineReducers({\n   authUser: authUserReducer,\n   comments: commentsReducer\n})","// authUser\nexport const CHANGE_AUTH_USER = 'CHANGE_AUTH_USER'\nexport const SET_AUTH_USER_USERNAME = 'SET_AUTH_USER_USERNAME'\n// comments\nexport const ADD_COMMENTS = 'ADD_COMMENTS'","import { IComment } from \"../constants/typescript-types\";\nimport { ADD_COMMENTS } from \"./types\";\n\n\ninterface IAction {\n   type: string,\n   payload: IComment[]\n}\n\nexport function commentsReducer(state: IComment[] = [], action: IAction) {\n   switch (action.type) {\n      case ADD_COMMENTS:\n         return [...state, ...action.payload]\n      default:\n         return state\n   }\n}","import app from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport { IComment } from '../constants/typescript-types';\n\n\nconst config = {\n   apiKey: \"AIzaSyDpt6WXqe7-GrSdSZxe1w1jD_h9XQIQWYA\",\n   authDomain: \"comments-system-6e56a.firebaseapp.com\",\n   databaseURL: \"https://comments-system-6e56a.firebaseio.com\",\n   projectId: \"comments-system-6e56a\",\n   storageBucket: \"comments-system-6e56a.appspot.com\",\n   messagingSenderId: \"463788584226\",\n   appId: \"1:463788584226:web:d0787997fe53b69d8d497b\",\n   measurementId: \"G-LMGZ5VEP27\"\n};\n\n\nexport class FirebaseConstructor {\n   auth: app.auth.Auth\n   db: app.firestore.Firestore\n   parentURL: string\n\n   constructor() {\n      app.initializeApp(config)\n      this.auth = app.auth()\n      this.db = app.firestore()\n      this.parentURL = getParentURL()\n   }\n\n   // *** Auth API ***\n   doCreateUserWithEmailAndPassword = (email: string, password: string) => this.auth.createUserWithEmailAndPassword(email, password)\n\n   doSignInWithEmailAndPassword = (email: string, password: string) => this.auth.signInWithEmailAndPassword(email, password)\n\n   doSignOut = () => this.auth.signOut()\n\n   doPasswordReset = (email: string) => this.auth.sendPasswordResetEmail(email)\n\n   doPasswordUpdate = (password: string) => this.auth.currentUser?.updatePassword(password)\n\n   // *** Firestore API ***\n   userRef = (uid: string) => this.db.collection('users').doc(uid)\n\n   commentsRef = () => this.db.collection('pages').doc(this.parentURL).collection('comments')\n\n   doCreateComment = (comment: IComment) => this.commentsRef().add(comment)\n}\n\n\nfunction getParentURL(): string {\n   const queryString = window.location.search.substring(1)\n   const queries = queryString.split(\"&\")\n\n   for (let query of queries) {\n      const pair = query.split('=')\n      if (pair[0] === 'parentURL') return pair[1]\n   }\n\n   return 'default'\n}","import React from 'react'\nimport { FirebaseConstructor } from './FirebaseConstructor'\n\nexport const Firebase = new FirebaseConstructor()\nexport const FirebaseContext = React.createContext<FirebaseConstructor>(Firebase)","export const GITHUB_PAGES = '/comments-system'\n\nexport const COMMENTS = '/comments'\nexport const SIGN_IN = '/signin'\nexport const SIGN_UP = '/signup'\nexport const ACCOUNT = '/account'\nexport const PASSWORD_RESET = '/password-reset'","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link, useLocation } from 'react-router-dom'\n\nimport * as ROUTES from '../constants/routes'\nimport { TAuthUser, IGlobalState } from '../constants/typescript-types'\n\nimport avatarSrc from '../img/avatar.svg'\nimport commentsSrc from '../img/comments.svg'\n\n\nexport const NavBar: React.FC = () => {\n   const authUser: TAuthUser = useSelector((state: IGlobalState) => state.authUser.user)\n   const isCurrentPageComments = useLocation().pathname === ROUTES.COMMENTS\n\n   const commentsClassname = (isCurrentPageComments) ? 'navbar__button navbar__button_pressed' : 'navbar__button'\n   const accountClassname = (isCurrentPageComments) ? 'navbar__button' : 'navbar__button navbar__button_pressed'\n\n   let username = useSelector((state: IGlobalState) => state.authUser.username)\n   if (!username) username = 'Loading...'\n\n   return (\n      <nav className=\"navbar\">\n         <Link to={ROUTES.COMMENTS} className={commentsClassname}>\n            <img className=\"navbar__img\" src={commentsSrc} alt=\"Comments\" />\n         </Link>\n\n         {authUser ?\n            <Link to={ROUTES.ACCOUNT} className={accountClassname}>{username}</Link>\n            :\n            <Link to={ROUTES.SIGN_IN} className={accountClassname}>\n               <img className=\"navbar__img\" src={avatarSrc} alt=\"Sign In\" />\n            </Link>\n         }\n      </nav>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport { useSelector } from 'react-redux'\nimport app from 'firebase/app'\nimport { IGlobalState, IComment } from '../../../constants/typescript-types'\n\n\nexport const CommentForm: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n   const { user: authUser, username } = useSelector((state: IGlobalState) => state.authUser)\n   const [text, setText] = useState<string>('')\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n      if (!authUser || !username) return\n\n      const comment: IComment = {\n         authorUsername: username,\n         authorUID: authUser?.uid,\n         text,\n         created: app.firestore.Timestamp.fromMillis(Date.now()),\n         likesCount: 0\n      }\n\n      firebase\n         .doCreateComment(comment)\n         .then((docRef) => console.log(\"Document written with ID: \", docRef.id))\n         .then(() => setText(''))\n         .catch((error) => console.error(\"Error adding document: \", error))\n   }\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <textarea\n            value={text}\n            onChange={(event) => setText(event.target.value)}\n            maxLength={1000}\n            placeholder=\"Write a comment...\"\n         >\n         </textarea>\n         <button type=\"submit\">Write as You</button>\n      </form>\n   )\n}","import React from 'react'\nimport moment from 'moment'\n\nimport { IComment } from '../../../constants/typescript-types'\nimport heart from '../../../img/heart.svg'\n\ntype TProps = { comment: IComment }\n\nexport const Comment: React.FC<TProps> = ({ comment }) => {\n   return (\n      <div className=\"comment\">\n         <div className=\"comment__author\">{comment.authorUsername}</div>\n         <div className=\"comment__created\">{moment.unix(comment.created.seconds).fromNow()}</div>\n         <p>{comment.text}</p>\n         <button className=\"comment__like\"><img src={heart} alt=\"like\" width=\"20px\" />{comment.likesCount}</button>\n         <button className=\"comment__reply\">Reply</button>\n         <hr />\n      </div>\n   )\n}","import React from 'react'\nimport { CommentForm } from './CommentForm'\nimport { Comment } from './Comment'\nimport { useCommentsLoading } from './useCommenstLoading'\n\nexport const CommentsPage: React.FC = () => {\n   const {comments, loadComments, isCommentsOver} = useCommentsLoading()\n\n   const commentsTemplate = comments.map((comment) => <Comment key={comment.created.nanoseconds} comment={comment} />)\n\n   return (\n      <div className=\"comments\">\n         <CommentForm />\n         {commentsTemplate}\n         <button onClick={loadComments} disabled={isCommentsOver}>Load more comments</button>\n      </div>\n   )\n}","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport { TAuthUser, IGlobalState } from '../constants/typescript-types'\nimport * as ROUTES from '../constants/routes'\n\n\ntype TCondition = (authUser: TAuthUser) => boolean\n\nexport const withAuthorisation = (condition: TCondition) => (Component: React.FC) => {\n\n   const WithAuthorisation: React.FC = (props) => {\n      const history = useHistory()\n      const authUser = useSelector((state: IGlobalState) => state.authUser.user)\n      const isConfirm = condition(authUser)\n\n      if (!isConfirm) {\n         history.push(ROUTES.SIGN_IN)\n      }\n\n      return isConfirm ? <Component {...props} /> : null\n   }\n\n   return WithAuthorisation\n}","import { useState, useContext, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { IComment, IGlobalState } from '../../../constants/typescript-types'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport { addComments } from '../../../redux/actions'\n\n\nexport function useCommentsLoading() {\n   const dispatch = useDispatch()\n   const comments = useSelector((state: IGlobalState) => state.comments)\n   \n   const firebase = useContext(FirebaseContext)\n\n   const limit: number = 50\n   const [query, setQuery] = useState(firebase.commentsRef().orderBy('created').limit(limit))\n   const [loading, setLoading] = useState<boolean>(false)\n   const [commentsOver, setCommenstOver] = useState<boolean>(false)\n   \n   \n   function loadComments() {\n      if (loading) return\n      setLoading(true)\n      \n      query.get().then((documentSnapshots) => {\n         if (documentSnapshots.docs.length < limit) setCommenstOver(true)\n         if (!documentSnapshots.docs.length) return\n         \n         const lastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n         setQuery(firebase.commentsRef().orderBy('created').limit(limit).startAfter(lastVisible))\n         \n         const loadedComments = documentSnapshots.docs.map((doc) => doc.data() as IComment)\n         dispatch(addComments(loadedComments))\n         \n         setLoading(false)\n      })\n   }\n   \n\n   useEffect(() => {\n      loadComments()\n      //eslint-disable-next-line\n   }, [])\n\n   return {comments, loadComments, isCommentsOver: commentsOver}\n}","import { CHANGE_AUTH_USER, SET_AUTH_USER_USERNAME, ADD_COMMENTS } from \"./types\";\nimport { TAuthUser, IComment } from \"../constants/typescript-types\";\n\n// authUser -----------------------------------------------------------------------\nexport const changeAuthUser = (user: TAuthUser) => ({\n   type: CHANGE_AUTH_USER,\n   payload: user\n})\n\nexport const setAuthUserUsername = (username: string) => ({\n   type: SET_AUTH_USER_USERNAME,\n   payload: username\n})\n\n// comments -----------------------------------------------------------------------\nexport const addComments = (comments: IComment[]) => ({\n   type: ADD_COMMENTS,\n   payload: comments\n})","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignInPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n\n   const [email, setEmail] = useState<string>('')\n   const [password, setPassword] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doSignInWithEmailAndPassword(email, password)\n         .then(() => {\n            setEmail('')\n            setPassword('')\n            setError(null)\n\n            history.push(ROUTES.COMMENTS)\n         })\n         .catch(setError)\n   }\n\n\n   let emailClassName = 'form__input'\n   let passwordClassName = 'form__input'\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n   passwordClassName += (password && password.length < 6) ? ' form__input_invalid' : ''\n\n   const isFormInvalid = password.length < 6 || !validator.validate(email)\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Sign In</h2>\n\n            <form onSubmit={handleSubmit}>\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <input\n                  name=\"password\"\n                  className={passwordClassName}\n                  value={password}\n                  onChange={(event) => setPassword(event.target.value.trim())}\n                  type=\"password\"\n                  placeholder=\"Password\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Sign In\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign up</Link>\n            </p>\n            <p className=\"form__link\">\n               Forgot password? <Link to={ROUTES.PASSWORD_RESET}>Reset</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignUpPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n\n   const [username, setUsername] = useState<string>('')\n   const [email, setEmail] = useState<string>('')\n   const [passwordOne, setPasswordOne] = useState<string>('')\n   const [passwordTwo, setPasswordTwo] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doCreateUserWithEmailAndPassword(email, passwordOne)\n         .then((authUser) => {\n            const uid = authUser.user?.uid\n            if (!uid) return\n            \n            firebase\n               .userRef(uid)\n               .set({ username, email })\n         })\n         .then(() => {\n            setUsername('')\n            setEmail('')\n            setPasswordOne('')\n            setPasswordTwo('')\n            setError(null)\n\n            history.push(ROUTES.COMMENTS)\n         })\n         .catch(setError)\n   }\n\n\n   let usernameClassName = 'form__input'\n   let emailClassName = 'form__input'\n   let passwordOneClassName = 'form__input'\n   let passwordTwoClassName = 'form__input'\n   usernameClassName += (username && username.length < 3 && username.length > 15) ? ' form__input_invalid' : ''\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n   passwordOneClassName += (passwordOne && passwordOne.length < 6 && passwordOne.length > 25) ? ' form__input_invalid' : ''\n   passwordTwoClassName += (passwordTwo && passwordTwo !== passwordOne) ? ' form__input_invalid' : ''\n\n   const isFormInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne.length < 6 ||\n      !validator.validate(email) ||\n      username === ''\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Sign Up</h2>\n\n            <form onSubmit={handleSubmit}>\n               <input\n                  name=\"username\"\n                  className={usernameClassName}\n                  value={username}\n                  onChange={(event) => setUsername(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Username\"\n               />\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <input\n                  name=\"passwordOne\"\n                  className={passwordOneClassName}\n                  value={passwordOne}\n                  onChange={(event) => setPasswordOne(event.target.value.trim())}\n                  type=\"password\"\n                  placeholder=\"Password\"\n               />\n               <input\n                  name=\"passwordTwo\"\n                  className={passwordTwoClassName}\n                  value={passwordTwo}\n                  onChange={(event) => setPasswordTwo(event.target.value.trim())}\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Sign Up\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Already have an account? <Link to={ROUTES.SIGN_IN}>Sign in</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { Link, useHistory } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const PasswordResetPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n   \n\n   const [email, setEmail] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleReset(): void {\n      firebase\n         .doPasswordReset(email)\n         .then(() => {\n            setEmail('')\n            setError(null)\n\n            history.push(ROUTES.SIGN_IN)\n         })\n         .catch(setError)\n   }\n\n\n   let emailClassName = 'form__input'\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n\n   const isFormInvalid = !validator.validate(email)\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Reset Password</h2>\n\n            <form onSubmit={handleReset}>\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Send reset email\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Recall password? <Link to={ROUTES.SIGN_IN}>Sign in</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignOutButton: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n   const history = useHistory()\n\n   function handleClick() {\n      firebase.doSignOut()\n      history.push(ROUTES.COMMENTS)\n   }\n\n   return (\n      <button onClick={handleClick} className=\"form__input form__button\">\n         Sign Out\n      </button>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\n\n\nexport const PasswordUpdateForm: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n\n   const [passwordOne, setPasswordOne] = useState<string>('')\n   const [passwordTwo, setPasswordTwo] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doPasswordUpdate(passwordOne)\n         ?.then(() => {\n            setPasswordOne('')\n            setPasswordTwo('')\n            setError(null)\n         })\n         .catch(setError)\n   }\n\n   let passwordOneClassName = 'form__input'\n   let passwordTwoClassName = 'form__input'\n   passwordOneClassName += (passwordOne && passwordOne.length < 6) ? ' form__input_invalid' : ''\n   passwordTwoClassName += (passwordTwo && passwordTwo !== passwordOne) ? ' form__input_invalid' : ''\n\n   const isFormInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne.length < 6\n\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <input\n            name=\"passwordOne\"\n            className={passwordOneClassName}\n            value={passwordOne}\n            onChange={(event) => setPasswordOne(event.target.value.trim())}\n            type=\"password\"\n            placeholder=\"New Password\"\n         />\n         <input\n            name=\"passwordTwo\"\n            className={passwordTwoClassName}\n            value={passwordTwo}\n            onChange={(event) => setPasswordTwo(event.target.value.trim())}\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n         />\n         <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n            Update password\n               </button>\n\n         {error && <p className=\"form__error\">{error.message}</p>}\n      </form>\n   )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { SignOutButton } from './SignOutButton'\n\nimport { withAuthorisation } from '../../../firebase/withAuthorisation'\nimport { TAuthUser, IGlobalState } from '../../../constants/typescript-types'\nimport { PasswordUpdateForm } from './PasswordUpdateForm'\n\n\nconst AccountPageBase: React.FC = () => {\n   let { user: authUser, username } = useSelector((state: IGlobalState) => state.authUser)\n   if (!username) username = 'Loading ...'\n   const email = authUser?.email\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title form__username\">{username}</h2>\n            <h2 className=\"form__title form__email\">{email}</h2>\n            \n            <PasswordUpdateForm />\n            <hr/>\n            <SignOutButton />\n         </div>\n      </div>\n   )\n}\n\nconst condition = (authUser: TAuthUser) => !!authUser\n\nexport const AccountPage = withAuthorisation(condition)(AccountPageBase)","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nimport { useAuthentication } from './firebase/useAuthentication';\nimport * as ROUTES from './constants/routes'\n\nimport { NavBar } from './components/NavBar';\nimport { CommentsPage } from './components/pages/comments/CommentsPage';\nimport { SignInPage } from './components/pages/auth/SignInPage';\nimport { SignUpPage } from './components/pages/auth/SignUpPage';\nimport { PasswordResetPage } from './components/pages/auth/PasswordResetPage';\nimport { AccountPage } from './components/pages/account/AccountPage';\n\nimport 'normalize.css'\nimport './styles/style.scss'\n\n\nexport const App: React.FC = () => {\n   useAuthentication()\n   \n   return (\n      <Router>\n         <NavBar />\n\n         <Route exact path='/'> <Redirect to={ROUTES.COMMENTS} /> </Route>\n         <Route path={ROUTES.GITHUB_PAGES}> <Redirect to={ROUTES.COMMENTS} /> </Route>\n\n         <Route path={ROUTES.COMMENTS} component={CommentsPage} />\n         <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n         <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n         <Route path={ROUTES.PASSWORD_RESET} component={PasswordResetPage} />\n         <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n      </Router>\n   );\n}","import { useEffect, useContext } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { TAuthUser } from '../constants/typescript-types'\nimport { changeAuthUser, setAuthUserUsername } from '../redux/actions'\nimport { FirebaseContext } from './FirebaseContext'\n\nexport function useAuthentication() {\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n\n   useEffect(() => {\n      const unsubscribe = firebase.auth.onAuthStateChanged((authUser: TAuthUser) => {\n         dispatch(changeAuthUser(authUser))\n         if (!authUser) return\n\n         firebase.userRef(authUser?.uid).get()\n            .then((doc) => {\n               if (!doc.exists) return\n               const username = doc.data()?.username\n               dispatch(setAuthUserUsername(username))\n            })\n      })\n\n      return unsubscribe\n      // eslint-disable-next-line\n   }, [])\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { rootReducer } from './redux/rootReducer';\n\nimport { App } from './App';\nimport { Firebase, FirebaseContext } from './firebase/FirebaseContext';\n\n\nconst persistConfig = {\n   key: 'root',\n   blacklist: ['comments'],\n   storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store: any = createStore(persistedReducer)\nconst persistor = persistStore(store)\n\n\nrender(\n   <React.StrictMode>\n      <Provider store={store}>\n         <PersistGate loading={null} persistor={persistor}>\n            <FirebaseContext.Provider value={Firebase}>\n               <App />\n            </FirebaseContext.Provider>\n         </PersistGate>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}