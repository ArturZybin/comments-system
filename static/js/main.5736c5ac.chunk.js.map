{"version":3,"sources":["img/heart.svg","img/filled-heart.svg","img/avatar.svg","img/comments.svg","redux/authUserReducer.ts","redux/responsesReducer.ts","redux/types.ts","redux/commentsReducer.ts","redux/rootReducer.ts","redux/actions.ts","firebase/FirebaseConstructor.ts","firebase/FirebaseContext.ts","constants/routes.ts","components/NavBar.tsx","components/pages/comments/CommentForm.tsx","components/pages/comments/responses/ResponseForm.tsx","components/pages/comments/responses/Response.tsx","components/pages/comments/responses/Responses.tsx","components/pages/comments/responses/useResponsesLoading.tsx","components/pages/comments/Comment.tsx","components/pages/comments/CommentsPage.tsx","firebase/withAuthorisation.tsx","components/pages/comments/useCommentsLoading.tsx","components/pages/auth/SignInPage.tsx","components/pages/auth/SignUpPage.tsx","components/pages/auth/PasswordResetPage.tsx","components/pages/account/SignOutButton.tsx","components/pages/account/PasswordUpdateForm.tsx","components/pages/account/AccountPage.tsx","App.tsx","firebase/useAuthentication.tsx","index.tsx"],"names":["module","exports","INITIAL_STATE","authUser","username","responsesReducer","state","action","responses","type","payload","isResponsesOver","response","responseIndex","likesCount","isLiked","comments","isCommentsOver","rootReducer","combineReducers","authUserStore","commentsStore","comment","index","commentIndex","setCommentLikes","setIsCommentLiked","setResponseLikes","setIsResponseLiked","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","auth","db","parentURL","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","userRef","uid","collection","doc","doCreateComment","commentsRef","add","commentLikesRef","commentRef","doCreateResponse","responsesRef","responseLikesRef","responseRef","app","initializeApp","this","firestore","queries","window","location","search","substring","split","pair","getParentURL","FirebaseContext","React","createContext","SIGN_IN","NavBar","useSelector","store","isCurrentPageComments","useLocation","pathname","commentsClassname","accountClassname","className","to","src","commentsSrc","alt","ROUTES","avatarSrc","CommentForm","history","useHistory","dispatch","useDispatch","firebase","useContext","useState","text","setText","onSubmit","event","preventDefault","authorUsername","authorUID","created","Timestamp","fromMillis","Date","now","then","docRef","createComment","catch","error","console","push","value","onChange","target","maxLength","placeholder","ResponseForm","createResponse","Response","useEffect","get","querySnapshot","docs","length","filter","data","loadResponseLikes","heartSrc","filledHeart","heart","moment","unix","seconds","fromNow","onClick","undefined","authUserLikeRef","delete","set","width","Responses","showForm","orderBy","limit","query","setQuery","loading","setLoading","loadResponses","documentSnapshots","setResponsesOver","lastVisible","startAfter","loadedResponses","map","ref","addResponses","useResponsesLoading","responsesTemplate","key","nanoseconds","showLoadButton","Comment","showResponseForm","setShowResponseForm","loadCommentLikes","condition","CommentsPage","loadComments","loadedComments","addComments","useCommentsLoading","commentsTemplate","SignInPage","setEmail","setPassword","setError","emailClassName","passwordClassName","validator","validate","isFormInvalid","name","trim","disabled","message","SignUpPage","setUsername","passwordOne","setPasswordOne","passwordTwo","setPasswordTwo","usernameClassName","passwordOneClassName","passwordTwoClassName","user","PasswordResetPage","SignOutButton","PasswordUpdateForm","AccountPage","Component","props","isConfirm","App","onAuthStateChanged","exists","setAuthUserUsername","useAuthentication","basename","exact","path","component","persistConfig","blacklist","storage","persistedReducer","persistReducer","createStore","composeWithDevTools","persistor","persistStore","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5736c5ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.77100eea.svg\";","module.exports = __webpack_public_path__ + \"static/media/filled-heart.f2610513.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.511718fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments.d68b6143.svg\";","import { CHANGE_AUTH_USER, SET_AUTH_USER_USERNAME } from \"./types\";\nimport { TAuthUser, IStore } from \"../constants/typescript-types\";\n\n\ninterface IAction {\n   type: string,\n   payload: TAuthUser | string\n}\n\ntype TState = IStore['authUserStore']\n\n\nconst INITIAL_STATE = {\n   authUser: null,\n   username: null\n}\n\nexport function authUserReducer (state: TState = INITIAL_STATE, action: IAction) {\n   switch(action.type) {\n      case CHANGE_AUTH_USER:\n         return { authUser: action.payload, username: null } as TState\n      case SET_AUTH_USER_USERNAME:\n         return { ...state, username: action.payload } as TState\n      default:\n         return state\n   }\n}","import { IComment, IResponse } from \"../constants/typescript-types\"\nimport { ADD_RESPONSES, SET_RESPONSES_OVER, SET_RESPONSE_LIKES, SET_IS_RESPONSE_LIKED, CREATE_RESPONSE } from \"./types\"\n\n\ninterface IAction {\n   type: string,\n   payload: any\n}\n\n\nexport function responsesReducer(state: IComment, action: IAction): IComment {\n   let responses\n\n   switch (action.type) {\n      case ADD_RESPONSES:\n         return { ...state, responses: [...state.responses as IResponse[], ...action.payload.responses] }\n\n      case SET_RESPONSES_OVER:\n         return { ...state, isResponsesOver: true }\n\n      case CREATE_RESPONSE:\n         responses = [action.payload.response, ...state.responses as IResponse[]]\n         return { ...state, responses }\n\n      case SET_RESPONSE_LIKES:\n         responses = state.responses as IResponse[]\n         responses[action.payload.responseIndex].likesCount = action.payload.likesCount\n         return { ...state, responses }\n\n      case SET_IS_RESPONSE_LIKED:\n         responses = state.responses as IResponse[]\n         responses[action.payload.responseIndex].isLiked = action.payload.isLiked\n         return { ...state, responses }\n\n      default:\n         return state\n   }\n}","// authUser\nexport const CHANGE_AUTH_USER = 'CHANGE_AUTH_USER'\nexport const SET_AUTH_USER_USERNAME = 'SET_AUTH_USER_USERNAME'\n// comments\nexport const ADD_COMMENTS = 'ADD_COMMENTS'\nexport const SET_COMMENTS_OVER = 'SET_COMMENTS_OVER'\nexport const CREATE_COMMENT = 'CREATE_COMMENT'\nexport const SET_COMMENT_LIKES = 'SET_COMMENT_LIKES'\nexport const SET_IS_COMMENT_LIKED = 'SET_IS_COMMENT_LIKED'\n// responses\nexport const ADD_RESPONSES = 'ADD_RESPONSES'\nexport const SET_RESPONSES_OVER = 'SET_RESPONSES_OVER'\nexport const CREATE_RESPONSE = 'CREATE_RESPONSE'\nexport const SET_RESPONSE_LIKES = 'SET_RESPONS_LIKES'\nexport const SET_IS_RESPONSE_LIKED = 'SET_IS_RESPONS_LIKED'","import { IComment, IStore } from \"../constants/typescript-types\";\nimport { ADD_COMMENTS, SET_COMMENTS_OVER, CREATE_COMMENT, SET_COMMENT_LIKES, SET_IS_COMMENT_LIKED, ADD_RESPONSES, SET_RESPONSES_OVER, SET_RESPONSE_LIKES, SET_IS_RESPONSE_LIKED, CREATE_RESPONSE } from \"./types\";\nimport { responsesReducer } from \"./responsesReducer\";\n\n\ninterface IAction {\n   type: string,\n   payload: any\n}\n\ntype TState = IStore['commentsStore']\n\nconst INITIAL_STATE: TState = {\n   comments: [],\n   isCommentsOver: false\n}\n\nexport function commentsReducer(state: TState = INITIAL_STATE, action: IAction) {\n   let comments: IComment[]\n   let comment: IComment\n\n   switch (action.type) {\n      case ADD_COMMENTS:\n         comments = [...state.comments, ...action.payload]\n         return { ...state, comments }\n\n      case SET_COMMENTS_OVER:\n         return { ...state, isCommentsOver: true }\n\n      case CREATE_COMMENT:\n         comments = [action.payload, ...state.comments]\n         return { ...state, comments }\n      \n      case SET_COMMENT_LIKES:\n         comments = state.comments\n         comments[action.payload.index].likesCount = action.payload.likesCount\n         return { ...state, comments }\n\n      case SET_IS_COMMENT_LIKED:\n         comments = state.comments\n         comments[action.payload.index].isLiked = action.payload.isLiked\n         return { ...state, comments }\n      \n      case ADD_RESPONSES:\n      case SET_RESPONSES_OVER:\n      case CREATE_RESPONSE:\n      case SET_RESPONSE_LIKES:\n      case SET_IS_RESPONSE_LIKED:\n         comment = state.comments[action.payload.commentIndex]\n         comment = responsesReducer(comment, action)\n         comments = state.comments\n         comments[action.payload.commentIndex] = comment\n         return {...state, comments}\n\n      default:\n         return state\n   }\n}","import { combineReducers } from \"redux\";\nimport { authUserReducer } from \"./authUserReducer\";\nimport { commentsReducer } from \"./commentsReducer\";\n\nexport const rootReducer = combineReducers({\n   authUserStore: authUserReducer,\n   commentsStore: commentsReducer\n})","import { CHANGE_AUTH_USER, SET_AUTH_USER_USERNAME, ADD_COMMENTS, SET_COMMENTS_OVER, CREATE_COMMENT, SET_COMMENT_LIKES, SET_IS_COMMENT_LIKED, ADD_RESPONSES, SET_RESPONSES_OVER, CREATE_RESPONSE, SET_RESPONSE_LIKES, SET_IS_RESPONSE_LIKED } from \"./types\";\nimport { TAuthUser, IComment, IResponse } from \"../constants/typescript-types\";\n\n// authUser -----------------------------------------------------------------------\nexport const changeAuthUser = (user: TAuthUser) => ({\n   type: CHANGE_AUTH_USER,\n   payload: user\n})\n\nexport const setAuthUserUsername = (username: string) => ({\n   type: SET_AUTH_USER_USERNAME,\n   payload: username\n})\n\n// comments -----------------------------------------------------------------------\nexport const addComments = (comments: IComment[]) => ({\n   type: ADD_COMMENTS,\n   payload: comments\n})\n\nexport const setCommentsOver = () => ({ type: SET_COMMENTS_OVER })\n\nexport const createComment = (comment: IComment) => ({\n   type: CREATE_COMMENT,\n   payload: comment\n})\n\nexport const setCommentLikes = (commentIndex: number, likesCount: number) => ({\n   type: SET_COMMENT_LIKES,\n   payload: { index: commentIndex, likesCount }\n})\n\nexport const setIsCommentLiked = (commentIndex: number, isLiked: boolean) => ({\n   type: SET_IS_COMMENT_LIKED,\n   payload: { index: commentIndex, isLiked }\n})\n\n// responses -----------------------------------------------------------------------\nexport const addResponses = (commentIndex: number, responses: IResponse[]) => ({\n   type: ADD_RESPONSES,\n   payload: { commentIndex, responses }\n})\n\nexport const setResponsesOver = (commentIndex: number) => ({\n   type: SET_RESPONSES_OVER,\n   payload: { commentIndex }\n})\n\nexport const createResponse = (commentIndex: number, response: IResponse) => ({\n   type: CREATE_RESPONSE,\n   payload: { commentIndex, response }\n})\n\nexport const setResponseLikes = (commentIndex: number, responseIndex: number, likesCount: number) => ({\n   type: SET_RESPONSE_LIKES,\n   payload: { commentIndex, responseIndex, likesCount }\n})\n\nexport const setIsResponseLiked = (commentIndex: number, responseIndex: number, isLiked: boolean) => ({\n   type: SET_IS_RESPONSE_LIKED,\n   payload: { commentIndex, responseIndex, isLiked }\n})","import app from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport { IComment, IResponse } from '../constants/typescript-types';\n\n\nconst config = {\n   apiKey: \"AIzaSyDpt6WXqe7-GrSdSZxe1w1jD_h9XQIQWYA\",\n   authDomain: \"comments-system-6e56a.firebaseapp.com\",\n   databaseURL: \"https://comments-system-6e56a.firebaseio.com\",\n   projectId: \"comments-system-6e56a\",\n   storageBucket: \"comments-system-6e56a.appspot.com\",\n   messagingSenderId: \"463788584226\",\n   appId: \"1:463788584226:web:d0787997fe53b69d8d497b\",\n   measurementId: \"G-LMGZ5VEP27\"\n};\n\n\nexport class FirebaseConstructor {\n   auth: app.auth.Auth\n   db: app.firestore.Firestore\n   parentURL: string\n\n   constructor() {\n      app.initializeApp(config)\n      this.auth = app.auth()\n      this.db = app.firestore()\n      this.parentURL = getParentURL()\n   }\n\n\n   // *** Auth API ***\n   doCreateUserWithEmailAndPassword = (email: string, password: string) => this.auth.createUserWithEmailAndPassword(email, password)\n\n   doSignInWithEmailAndPassword = (email: string, password: string) => this.auth.signInWithEmailAndPassword(email, password)\n\n   doSignOut = () => this.auth.signOut()\n\n   doPasswordReset = (email: string) => this.auth.sendPasswordResetEmail(email)\n\n   doPasswordUpdate = (password: string) => this.auth.currentUser?.updatePassword(password)\n\n\n   // *** Firestore API ***\n   userRef = (uid: string) => this.db.collection('users').doc(uid)\n\n   // comment\n   doCreateComment = (comment: IComment) => this.commentsRef().add(comment)\n\n   commentsRef = () => this.db.collection('pages').doc(this.parentURL).collection('comments')\n\n   commentLikesRef = (commentRef: app.firestore.DocumentReference) => commentRef.collection('likes')\n   \n   // response\n   doCreateResponse = (commentRef: app.firestore.DocumentReference, response: IResponse) => this.responsesRef(commentRef).add(response)\n\n   responsesRef = (commentRef: app.firestore.DocumentReference) => commentRef.collection('responses')\n\n   responseLikesRef = (responseRef: app.firestore.DocumentReference) => responseRef.collection('likes')\n}\n\n\nfunction getParentURL(): string {\n   const queryString = window.location.search.substring(1)\n   const queries = queryString.split(\"&\")\n\n   for (let query of queries) {\n      const pair = query.split('=')\n      if (pair[0] === 'parentURL') return pair[1]\n   }\n\n   return 'default'\n}","import React from 'react'\nimport { FirebaseConstructor } from './FirebaseConstructor'\n\nexport const Firebase = new FirebaseConstructor()\nexport const FirebaseContext = React.createContext<FirebaseConstructor>(Firebase)","export const COMMENTS = '/comments'\nexport const SIGN_IN = '/signin'\nexport const SIGN_UP = '/signup'\nexport const ACCOUNT = '/account'\nexport const PASSWORD_RESET = '/password-reset'","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link, useLocation } from 'react-router-dom'\n\nimport * as ROUTES from '../constants/routes'\nimport { IStore } from '../constants/typescript-types'\n\nimport avatarSrc from '../img/avatar.svg'\nimport commentsSrc from '../img/comments.svg'\n\n\nexport const NavBar: React.FC = () => {\n   let { authUser, username } = useSelector((store: IStore) => store.authUserStore)\n   if (!username) username = 'Loading...'\n\n   const isCurrentPageComments = useLocation().pathname === ROUTES.COMMENTS\n   const commentsClassname = (isCurrentPageComments) ? 'navbar__button navbar__button_pressed' : 'navbar__button'\n   const accountClassname = (isCurrentPageComments) ? 'navbar__button' : 'navbar__button navbar__button_pressed'\n\n\n   return (\n      <nav className=\"navbar\">\n         <Link to={ROUTES.COMMENTS} className={commentsClassname}>\n            <img className=\"navbar__img\" src={commentsSrc} alt=\"Comments\" />\n         </Link>\n\n         {authUser ?\n            <Link to={ROUTES.ACCOUNT} className={accountClassname}>{username}</Link>\n            :\n            <Link to={ROUTES.SIGN_IN} className={accountClassname}>\n               <img className=\"navbar__img\" src={avatarSrc} alt=\"Sign In\" />\n            </Link>\n         }\n      </nav>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport app from 'firebase/app'\n\nimport { createComment } from '../../../redux/actions'\nimport * as ROUTES from '../../../constants/routes'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport { IStore, IComment } from '../../../constants/typescript-types'\n\n\nexport const CommentForm: React.FC = () => {\n   const history = useHistory()\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n\n   const { authUser, username } = useSelector((store: IStore) => store.authUserStore)\n   const [text, setText] = useState<string>('')\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n      if (!username || !authUser) {\n         if (!authUser) history.push(ROUTES.SIGN_IN)\n         return\n      }\n\n      const comment: IComment = {\n         authorUsername: username,\n         authorUID: authUser?.uid,\n         text,\n         created: app.firestore.Timestamp.fromMillis(Date.now())\n      }\n\n      firebase\n         .doCreateComment(comment)\n         .then((docRef) => dispatch( createComment({ ...comment, docRef, responses: [], isResponsesOver: false }) ))\n         .then(() => setText(''))\n         .catch((error) => console.error(\"Error adding comment: \", error))\n   }\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <textarea\n            value={text}\n            onChange={(event) => setText(event.target.value)}\n            maxLength={1000}\n            placeholder=\"Write a comment...\"\n         >\n         </textarea>\n         {\n            authUser ?\n            <button type=\"submit\">Write as {username ? username : 'you'}</button>\n            :\n            <span><Link to={ROUTES.SIGN_IN}>Sign in</Link> to publish</span>\n         }\n      </form>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport app from 'firebase/app'\n\nimport { createResponse } from '../../../../redux/actions'\nimport * as ROUTES from '../../../../constants/routes'\nimport { FirebaseContext } from '../../../../firebase/FirebaseContext'\nimport { IStore, IResponse } from '../../../../constants/typescript-types'\n\n\ntype TProps = { commentRef: app.firestore.DocumentReference, commentIndex: number }\n\nexport const ResponseForm: React.FC<TProps> = ({ commentRef, commentIndex }) => {\n   const history = useHistory()\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n\n   const { authUser, username } = useSelector((store: IStore) => store.authUserStore)\n   const [text, setText] = useState<string>('')\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n      if (!username || !authUser) {\n         if (!authUser) history.push(ROUTES.SIGN_IN)\n         return\n      }\n\n      const response: IResponse = {\n         authorUsername: username,\n         authorUID: authUser?.uid,\n         text,\n         created: app.firestore.Timestamp.fromMillis(Date.now())\n      }\n\n      firebase\n         .doCreateResponse(commentRef, response)\n         .then((docRef) => dispatch( createResponse(commentIndex, { ...response, docRef }) ))\n         .then(() => setText(''))\n         .catch((error) => console.error(\"Error adding response: \", error))\n   }\n\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <textarea\n            value={text}\n            onChange={(event) => setText(event.target.value)}\n            maxLength={1000}\n            placeholder=\"Write a response...\"\n         >\n         </textarea>\n\n         {\n            authUser ?\n            <button type=\"submit\">Write as {username ? username : 'you'}</button>\n            :\n            <span><Link to={ROUTES.SIGN_IN}>Sign in</Link> to publish</span>\n         }\n      </form>\n   )\n}","import React, { useContext, useEffect } from 'react'\nimport app from 'firebase/app'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport moment from 'moment'\n\nimport { FirebaseContext } from '../../../../firebase/FirebaseContext'\nimport { IResponse, IStore } from '../../../../constants/typescript-types'\nimport * as ROUTES from '../../../../constants/routes'\n\nimport heart from '../../../../img/heart.svg'\nimport filledHeart from '../../../../img/filled-heart.svg'\nimport { setResponseLikes, setIsResponseLiked } from '../../../../redux/actions'\n\n\ntype TProps = { response: IResponse, responseIndex: number, commentIndex: number }\n\nexport const Response: React.FC<TProps> = ({ response, responseIndex, commentIndex }) => {\n   const history = useHistory()\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n   const authUser = useSelector((store: IStore) => store.authUserStore.authUser)\n\n\n   useEffect(() => {\n      loadResponseLikes()\n      // eslint-disable-next-line\n   }, [authUser])\n\n\n   function loadResponseLikes() {\n      const responseRef = response.docRef as app.firestore.DocumentReference\n\n      firebase.responseLikesRef(responseRef).get()\n         .then((querySnapshot) => {\n            const likesCount = querySnapshot.docs.length\n            const isLiked = querySnapshot.docs.filter((doc) => doc.data().uid === authUser?.uid).length !== 0\n            dispatch( setResponseLikes(commentIndex, responseIndex, likesCount) )\n            dispatch( setIsResponseLiked(commentIndex, responseIndex, isLiked) )\n         })\n   }\n\n\n   function handleLike() {\n      if (!authUser) {\n         history.push(ROUTES.SIGN_IN)\n         return\n      }\n      if (response.likesCount === undefined || response.isLiked === undefined) {\n         return\n      }\n\n      const authUserLikeRef = firebase.responseLikesRef(response.docRef as app.firestore.DocumentReference).doc(authUser.uid)\n\n      if (response.isLiked) {\n         dispatch( setResponseLikes(commentIndex, responseIndex, response.likesCount - 1) )\n         authUserLikeRef.delete()\n      } else {\n         dispatch( setResponseLikes(commentIndex, responseIndex, response.likesCount + 1) )\n         authUserLikeRef.set({ uid: authUser.uid })\n      }\n\n      dispatch( setIsResponseLiked(commentIndex, responseIndex, !response.isLiked) )\n   }\n\n\n   const heartSrc = response.isLiked ? filledHeart : heart\n\n   return (\n      <div className=\"response\">\n         <div className=\"response__author\">{response.authorUsername}</div>\n         <div className=\"response__created\">{moment.unix(response.created.seconds).fromNow()}</div>\n         <p>{response.text}</p>\n         \n         <button className=\"response__like\" onClick={handleLike}>\n            <img src={heartSrc} alt=\"like\" width=\"20px\"/>{response.likesCount}\n         </button>\n      </div>\n   )\n}","import React from 'react'\nimport app from 'firebase/app'\n\nimport { ResponseForm } from './ResponseForm'\nimport { Response } from './Response'\n\nimport { useResponsesLoading } from './useResponsesLoading'\nimport { IComment } from '../../../../constants/typescript-types'\n\n\ntype TProps = { comment: IComment, commentIndex: number, showForm: boolean }\n\nexport const Responses: React.FC<TProps> = ({ comment, commentIndex, showForm }) => {\n   const { responses, loadResponses, isResponsesOver } = useResponsesLoading(comment, commentIndex)\n\n   const responsesTemplate = responses?.map((response, index) => (\n      <Response\n         key={response.created.nanoseconds}\n         responseIndex={index}\n         commentIndex={commentIndex}\n         response={response}\n      />\n   ))\n\n\n   const showLoadButton: boolean = !isResponsesOver\n\n   return (\n      <div className=\"responses\">\n         {showForm &&\n            <ResponseForm\n               commentRef={comment.docRef as app.firestore.DocumentReference}\n               commentIndex={commentIndex}\n            />\n         }\n         \n         {responsesTemplate}\n         {showLoadButton && <button onClick={loadResponses}>Load more responses</button>}\n      </div>\n   )\n}","import { useState, useContext, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport app from 'firebase/app'\n\nimport { IComment, IResponse } from '../../../../constants/typescript-types'\nimport { FirebaseContext } from '../../../../firebase/FirebaseContext'\nimport { setResponsesOver, addResponses } from '../../../../redux/actions'\n\n\nexport function useResponsesLoading(comment: IComment, commentIndex: number) {\n   const dispatch = useDispatch()\n   const {responses, isResponsesOver} = comment\n   \n   const firebase = useContext(FirebaseContext)\n\n   const limit: number = 10\n\n   const responsesRef = firebase.responsesRef(comment.docRef as app.firestore.DocumentReference)\n   const [query, setQuery] = useState(responsesRef.orderBy('created', \"desc\").limit(limit))\n   const [loading, setLoading] = useState<boolean>(false)\n   \n   \n   function loadResponses() {\n      if (loading) return\n      setLoading(true)\n      \n      query.get().then((documentSnapshots) => {\n         if (documentSnapshots.docs.length < limit) {\n            dispatch(setResponsesOver(commentIndex))\n         }\n         if (!documentSnapshots.docs.length) return\n         \n         const lastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n         setQuery(responsesRef.orderBy('created', \"desc\").limit(limit).startAfter(lastVisible))\n         \n         const loadedResponses = documentSnapshots.docs.map((doc) => ({...doc.data(), docRef: doc.ref} as IResponse))\n         dispatch(addResponses(commentIndex, loadedResponses))\n         \n         setLoading(false)\n      })\n   }\n   \n\n   useEffect(() => {\n      if (!responses?.length) loadResponses()\n      //eslint-disable-next-line\n   }, [])\n\n   return {responses, loadResponses, isResponsesOver}\n}","import React, { useContext, useEffect, useState } from 'react'\nimport app from 'firebase/app'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport moment from 'moment'\n\nimport { Responses } from './responses/Responses'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport { setCommentLikes, setIsCommentLiked } from '../../../redux/actions'\nimport { IComment, IStore } from '../../../constants/typescript-types'\nimport * as ROUTES from '../../../constants/routes'\n\nimport heart from '../../../img/heart.svg'\nimport filledHeart from '../../../img/filled-heart.svg'\n\n\ntype TProps = { comment: IComment, commentIndex: number }\n\nexport const Comment: React.FC<TProps> = ({ comment, commentIndex }) => {\n   const history = useHistory()\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n   const authUser = useSelector((store: IStore) => store.authUserStore.authUser)\n\n   const [showResponseForm, setShowResponseForm] = useState<boolean>(false)\n\n\n   useEffect(() => {\n      loadCommentLikes()\n      //eslint-disable-next-line\n   }, [authUser])\n\n\n   function loadCommentLikes(): void {\n      const commentRef = comment.docRef as app.firestore.DocumentReference\n\n      firebase.commentLikesRef(commentRef).get()\n         .then((querySnapshot) => {\n            const likesCount = querySnapshot.docs.length\n            const isLiked = querySnapshot.docs.filter((doc) => doc.data().uid === authUser?.uid).length !== 0\n            dispatch( setCommentLikes(commentIndex, likesCount) )\n            dispatch( setIsCommentLiked(commentIndex, isLiked) )\n         })\n   }\n\n\n   function handleLike(): void {\n      if (!authUser) {\n         history.push(ROUTES.SIGN_IN)\n         return\n      }\n      if (comment.likesCount === undefined || comment.isLiked === undefined) {\n         return\n      }\n\n      const authUserLikeRef = firebase.commentLikesRef(comment.docRef as app.firestore.DocumentReference).doc(authUser?.uid)\n\n      if (comment.isLiked) {\n         dispatch( setCommentLikes(commentIndex, comment.likesCount - 1) )\n         authUserLikeRef.delete()\n      } else {\n         dispatch( setCommentLikes(commentIndex, comment.likesCount + 1) )\n         authUserLikeRef.set({ uid: authUser?.uid })\n      }\n\n      dispatch( setIsCommentLiked(commentIndex, !comment.isLiked) )\n   }\n\n\n   function handleReply(): void {\n      if (!authUser) {\n         history.push(ROUTES.SIGN_IN)\n         return\n      }\n      setShowResponseForm(!showResponseForm)\n   }\n\n   \n   const heartSrc = comment.isLiked ? filledHeart : heart\n\n   return (\n      <div className=\"comment\">\n         <div className=\"comment__author\">{comment.authorUsername}</div>\n         <div className=\"comment__created\">{moment.unix(comment.created.seconds).fromNow()}</div>\n         <p>{comment.text}</p>\n         \n         <button className=\"comment__like\" onClick={handleLike}>\n            <img src={heartSrc} alt=\"like\" width=\"20px\"/>{comment.likesCount}\n         </button>\n         <button className=\"comment__reply\" onClick={handleReply}>Reply</button>\n\n         <Responses comment={comment} commentIndex={commentIndex} showForm={showResponseForm} />\n         <hr />\n      </div>\n   )\n}","import React from 'react'\nimport { CommentForm } from './CommentForm'\nimport { Comment } from './Comment'\nimport { useCommentsLoading } from './useCommentsLoading'\n\nexport const CommentsPage: React.FC = () => {\n   const { comments, loadComments, isCommentsOver } = useCommentsLoading()\n\n   const commentsTemplate = comments.map((comment, index) => (\n      <Comment\n         key={comment.created.nanoseconds}\n         commentIndex={index}\n         comment={comment}\n      />\n   ))\n\n\n   const showLoader: boolean = !isCommentsOver && !comments.length\n   const showLoadButton: boolean = !isCommentsOver\n\n   return (\n      showLoader\n         ?\n         <p>Loading...</p>\n         :\n         <div className=\"comments\">\n            <CommentForm />\n            {commentsTemplate}\n            {showLoadButton && <button onClick={loadComments}>Load more comments</button>}\n         </div >\n   )\n}","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport { TAuthUser, IStore } from '../constants/typescript-types'\nimport * as ROUTES from '../constants/routes'\n\n\ntype TCondition = (authUser: TAuthUser) => boolean\n\nexport const withAuthorisation = (condition: TCondition) => (Component: React.FC) => {\n\n   const WithAuthorisation: React.FC = (props) => {\n      const history = useHistory()\n      const authUser = useSelector((store: IStore) => store.authUserStore.authUser)\n      const isConfirm = condition(authUser)\n\n      if (!isConfirm) {\n         history.push(ROUTES.SIGN_IN)\n      }\n\n      return isConfirm ? <Component {...props} /> : null\n   }\n\n   return WithAuthorisation\n}","import { useState, useContext, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { IComment, IStore, IResponse } from '../../../constants/typescript-types'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport { addComments, setCommentsOver } from '../../../redux/actions'\n\n\nexport function useCommentsLoading() {\n   const dispatch = useDispatch()\n   const {comments, isCommentsOver} = useSelector((store: IStore) => store.commentsStore)\n   \n   const firebase = useContext(FirebaseContext)\n\n   const limit: number = 50\n   const [query, setQuery] = useState(firebase.commentsRef().orderBy('created', \"desc\").limit(limit))\n   const [loading, setLoading] = useState<boolean>(false)\n   \n   \n   function loadComments() {\n      if (loading) return\n      setLoading(true)\n      \n      query.get().then((documentSnapshots) => {\n         if (documentSnapshots.docs.length < limit) dispatch(setCommentsOver())\n         if (!documentSnapshots.docs.length) return\n         \n         const lastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n         setQuery(firebase.commentsRef().orderBy('created', \"desc\").limit(limit).startAfter(lastVisible))\n         \n         const loadedComments = documentSnapshots.docs.map((doc) => ({\n            ...doc.data(),\n            docRef: doc.ref,\n            responses: [] as IResponse[],\n            isResponsesOver: false\n         } as IComment))\n         dispatch(addComments(loadedComments))\n         \n         setLoading(false)\n      })\n   }\n   \n\n   useEffect(() => {\n      if (!comments.length) loadComments()\n      //eslint-disable-next-line\n   }, [])\n\n   return {comments, loadComments, isCommentsOver}\n}","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignInPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n\n   const [email, setEmail] = useState<string>('')\n   const [password, setPassword] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doSignInWithEmailAndPassword(email, password)\n         .then(() => {\n            setEmail('')\n            setPassword('')\n            setError(null)\n\n            history.push(ROUTES.COMMENTS)\n         })\n         .catch(setError)\n   }\n\n\n   let emailClassName = 'form__input'\n   let passwordClassName = 'form__input'\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n   passwordClassName += (password && password.length < 6) ? ' form__input_invalid' : ''\n\n   const isFormInvalid = password.length < 6 || !validator.validate(email)\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Sign In</h2>\n\n            <form onSubmit={handleSubmit}>\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <input\n                  name=\"password\"\n                  className={passwordClassName}\n                  value={password}\n                  onChange={(event) => setPassword(event.target.value.trim())}\n                  type=\"password\"\n                  placeholder=\"Password\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Sign In\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign up</Link>\n            </p>\n            <p className=\"form__link\">\n               Forgot password? <Link to={ROUTES.PASSWORD_RESET}>Reset</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { useHistory, Link } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignUpPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n\n   const [username, setUsername] = useState<string>('')\n   const [email, setEmail] = useState<string>('')\n   const [passwordOne, setPasswordOne] = useState<string>('')\n   const [passwordTwo, setPasswordTwo] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doCreateUserWithEmailAndPassword(email, passwordOne)\n         .then((authUser) => {\n            const uid = authUser.user?.uid\n            if (!uid) return\n            \n            firebase\n               .userRef(uid)\n               .set({ username, email })\n         })\n         .then(() => {\n            setUsername('')\n            setEmail('')\n            setPasswordOne('')\n            setPasswordTwo('')\n            setError(null)\n\n            history.push(ROUTES.COMMENTS)\n         })\n         .catch(setError)\n   }\n\n\n   let usernameClassName = 'form__input'\n   let emailClassName = 'form__input'\n   let passwordOneClassName = 'form__input'\n   let passwordTwoClassName = 'form__input'\n   usernameClassName += (username && username.length < 3 && username.length > 15) ? ' form__input_invalid' : ''\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n   passwordOneClassName += (passwordOne && passwordOne.length < 6 && passwordOne.length > 25) ? ' form__input_invalid' : ''\n   passwordTwoClassName += (passwordTwo && passwordTwo !== passwordOne) ? ' form__input_invalid' : ''\n\n   const isFormInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne.length < 6 ||\n      !validator.validate(email) ||\n      username === ''\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Sign Up</h2>\n\n            <form onSubmit={handleSubmit}>\n               <input\n                  name=\"username\"\n                  className={usernameClassName}\n                  value={username}\n                  onChange={(event) => setUsername(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Username\"\n               />\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <input\n                  name=\"passwordOne\"\n                  className={passwordOneClassName}\n                  value={passwordOne}\n                  onChange={(event) => setPasswordOne(event.target.value.trim())}\n                  type=\"password\"\n                  placeholder=\"Password\"\n               />\n               <input\n                  name=\"passwordTwo\"\n                  className={passwordTwoClassName}\n                  value={passwordTwo}\n                  onChange={(event) => setPasswordTwo(event.target.value.trim())}\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Sign Up\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Already have an account? <Link to={ROUTES.SIGN_IN}>Sign in</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { Link, useHistory } from 'react-router-dom';\nimport validator from 'email-validator';\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const PasswordResetPage: React.FC = () => {\n   const history = useHistory()\n   const firebase = useContext(FirebaseContext)\n   \n\n   const [email, setEmail] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleReset(): void {\n      firebase\n         .doPasswordReset(email)\n         .then(() => {\n            setEmail('')\n            setError(null)\n\n            history.push(ROUTES.SIGN_IN)\n         })\n         .catch(setError)\n   }\n\n\n   let emailClassName = 'form__input'\n   emailClassName += (email && !validator.validate(email)) ? ' form__input_invalid' : ''\n\n   const isFormInvalid = !validator.validate(email)\n\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title\">Reset Password</h2>\n\n            <form onSubmit={handleReset}>\n               <input\n                  name=\"email\"\n                  className={emailClassName}\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value.trim())}\n                  type=\"text\"\n                  placeholder=\"Email Address\"\n               />\n               <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n                  Send reset email\n               </button>\n\n               {error && <p className=\"form__error\">{error.message}</p>}\n            </form>\n\n            <p className=\"form__link\">\n               Recall password? <Link to={ROUTES.SIGN_IN}>Sign in</Link>\n            </p>\n         </div>\n      </div>\n   )\n}","import React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\nimport * as ROUTES from '../../../constants/routes'\n\n\nexport const SignOutButton: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n   const history = useHistory()\n\n   function handleClick() {\n      firebase.doSignOut()\n      history.push(ROUTES.COMMENTS)\n   }\n\n   return (\n      <button onClick={handleClick} className=\"form__input form__button\">\n         Sign Out\n      </button>\n   )\n}","import React, { useState, useContext } from 'react'\nimport { FirebaseContext } from '../../../firebase/FirebaseContext'\n\n\nexport const PasswordUpdateForm: React.FC = () => {\n   const firebase = useContext(FirebaseContext)\n\n   const [passwordOne, setPasswordOne] = useState<string>('')\n   const [passwordTwo, setPasswordTwo] = useState<string>('')\n   const [error, setError] = useState<Error | null>(null)\n\n\n   function handleSubmit(event: React.FormEvent) {\n      event.preventDefault()\n\n      firebase\n         .doPasswordUpdate(passwordOne)\n         ?.then(() => {\n            setPasswordOne('')\n            setPasswordTwo('')\n            setError(null)\n         })\n         .catch(setError)\n   }\n\n   let passwordOneClassName = 'form__input'\n   let passwordTwoClassName = 'form__input'\n   passwordOneClassName += (passwordOne && passwordOne.length < 6) ? ' form__input_invalid' : ''\n   passwordTwoClassName += (passwordTwo && passwordTwo !== passwordOne) ? ' form__input_invalid' : ''\n\n   const isFormInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne.length < 6\n\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <input\n            name=\"passwordOne\"\n            className={passwordOneClassName}\n            value={passwordOne}\n            onChange={(event) => setPasswordOne(event.target.value.trim())}\n            type=\"password\"\n            placeholder=\"New Password\"\n         />\n         <input\n            name=\"passwordTwo\"\n            className={passwordTwoClassName}\n            value={passwordTwo}\n            onChange={(event) => setPasswordTwo(event.target.value.trim())}\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n         />\n         <button disabled={isFormInvalid} type=\"submit\" className=\"form__input form__button\">\n            Update password\n               </button>\n\n         {error && <p className=\"form__error\">{error.message}</p>}\n      </form>\n   )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { SignOutButton } from './SignOutButton'\n\nimport { withAuthorisation } from '../../../firebase/withAuthorisation'\nimport { TAuthUser, IStore } from '../../../constants/typescript-types'\nimport { PasswordUpdateForm } from './PasswordUpdateForm'\n\n\nconst AccountPageBase: React.FC = () => {\n   let { authUser, username } = useSelector((store: IStore) => store.authUserStore)\n   if (!username) username = 'Loading ...'\n   const email = authUser?.email\n\n   return (\n      <div className=\"form-background\">\n         <div className=\"form\">\n            <h2 className=\"form__title form__username\">{username}</h2>\n            <h2 className=\"form__title form__email\">{email}</h2>\n            \n            <PasswordUpdateForm />\n            <hr/>\n            <SignOutButton />\n         </div>\n      </div>\n   )\n}\n\nconst condition = (authUser: TAuthUser) => !!authUser\n\nexport const AccountPage = withAuthorisation(condition)(AccountPageBase)","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nimport { useAuthentication } from './firebase/useAuthentication';\nimport * as ROUTES from './constants/routes'\n\nimport { NavBar } from './components/NavBar';\nimport { CommentsPage } from './components/pages/comments/CommentsPage';\nimport { SignInPage } from './components/pages/auth/SignInPage';\nimport { SignUpPage } from './components/pages/auth/SignUpPage';\nimport { PasswordResetPage } from './components/pages/auth/PasswordResetPage';\nimport { AccountPage } from './components/pages/account/AccountPage';\n\nimport 'normalize.css'\nimport './styles/style.scss'\n\n\nexport const App: React.FC = () => {\n   useAuthentication()\n   \n   return (\n      <Router basename=\"/comments-system\">\n         <NavBar />\n\n         <Route exact path='/'> <Redirect to={ROUTES.COMMENTS} /> </Route>\n\n         <Route path={ROUTES.COMMENTS} component={CommentsPage} />\n         <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n         <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n         <Route path={ROUTES.PASSWORD_RESET} component={PasswordResetPage} />\n         <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n      </Router>\n   );\n}","import { useEffect, useContext } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { TAuthUser } from '../constants/typescript-types'\nimport { changeAuthUser, setAuthUserUsername } from '../redux/actions'\nimport { FirebaseContext } from './FirebaseContext'\n\nexport function useAuthentication() {\n   const dispatch = useDispatch()\n   const firebase = useContext(FirebaseContext)\n\n   useEffect(() => {\n      const unsubscribe = firebase.auth.onAuthStateChanged((authUser: TAuthUser) => {\n         dispatch(changeAuthUser(authUser))\n         if (!authUser) return\n\n         firebase.userRef(authUser?.uid).get()\n            .then((doc) => {\n               if (!doc.exists) return\n               const username = doc.data()?.username\n               dispatch(setAuthUserUsername(username))\n            })\n      })\n\n      return unsubscribe\n      // eslint-disable-next-line\n   }, [])\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport { rootReducer } from './redux/rootReducer';\n\nimport { App } from './App';\nimport { Firebase, FirebaseContext } from './firebase/FirebaseContext';\n\n\nconst persistConfig = {\n   key: 'root',\n   blacklist: ['commentsStore'],\n   storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store: any = createStore(persistedReducer, composeWithDevTools())\nconst persistor = persistStore(store)\n\n\nrender(\n   <React.StrictMode>\n      <Provider store={store}>\n         <PersistGate loading={null} persistor={persistor}>\n            <FirebaseContext.Provider value={Firebase}>\n               <App />\n            </FirebaseContext.Provider>\n         </PersistGate>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root')\n);"],"sourceRoot":""}